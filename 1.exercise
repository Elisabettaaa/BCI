function [ struct ] = epoch_struct( Event  )

%what in output in the struc

 channels=h.Label;
 fs=h.SampleRate;
 Num_Trials=size(h.EVENT.POS(h.EVENT.TYP==200)); % because in each trials we'll have the same epoch, considering one is still enough.
 Events=[h.EVENT.POS(h.EVENT.TYP==200),h.EVENT.POS(h.EVENT.TYP==400),h.EVENT.POS(h.EVENT.TYP==555)];
 
 
    before_event=zeros(30,1);
    after_event=zeros(30,1);
    ta=zeros(30,1);
    tb=zeros(30,1);
    
    k=1;
    for i=1:length(h.EVENT.TYP)
        if h.EVENT.TYP(i)==Event
            tc=h.EVENT.POS(i);
            before_event=h.EVENT.TYP(i-1);
            after_event=h.EVENT.TYP(i+1);
            ta(k,:)=h.EVENT.POS(i-1);
            tb(k,:)=h.EVENT.POS(i+1);
            start(k,:)=(tc-ta)/fs; %in seconds
            stop(k,:)=(tb-tc)/fs;  %in seconds
            k=k+1;
        end
    end
    
  
    
    for trId=1:Num_Trials
    cstart=ta(trId);  %i multiply for the frequency because the colon operation requires integer
    cstop=tb(trId);
    disp(['event'  ,num2str( Event), 'start at', num2str( cstart) ,'end at', num2str(cstop)]);
    ContFeed(:,:,trId)=s(cstart:cstop,1:NumChannels); %(time-sample, channels,trials)    %extract the continuos feed of the data from the file
    end
    
    Data=ContFeed;
    time= -start:1/fs:timeAfterEvent;
    
    
end

